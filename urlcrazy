#!/usr/bin/env ruby
#
# URLCrazy
# Copyright Andrew Horton
#
# rm country-ips.dat
# wget 'http://software77.net/geo-ip/?DL=1' -O IpToCountry.csv.gz
# gzip -d IpToCountry.csv.gz
# wget 'http://software77.net/geo-ip/?DL=6' -O country-codes.txt
# 
# License: Copyright Andrew Horton, 2012-2020. You have permission to use and distribute this software. You do not have permission to distribute modified versions without permission. You do not have permission to use this as part of a commercial service unless it forms part of a penetration testing service. For example a commercial service that provides domain protection for clients must obtain a license first. Email me if you require a license.
$DEBUG = false

begin
  require 'rubygems'
  require 'getoptlong'
  require 'singleton'
  require 'pp'
  require 'socket'
  require 'net/http'
  require 'resolv'
  require 'resolv-replace'
  require 'csv'
  require 'json'
  require 'colorize'
  require 'async'
  require 'async/dns'
  require 'async/http'
  require 'async/http/internet'
  require 'logger'
  require 'pry' if $DEBUG
rescue LoadError
  #banner
  puts "URLCrazy dependencies are not installed."
  puts "To install the dependencies, copy and paste the following command, or check the Installation section of the README.md file."
  puts "`$ bundle install`\n\n"
  exit 1
end


$logger = Logger.new(STDOUT)

if $DEBUG
  $logger.level = Logger::DEBUG
else
  $logger.level = Logger::FATAL
end

# Check the ulimit
current_ulimit = `sh -c "ulimit -n"`
if current_ulimit != "unlimited" and current_ulimit.to_i < 10000
  puts "Warning. File descriptor limit may be too low. Check with `ulimit -a` and change with `ulimit -n 10000`"
end

# add the directory of the file currently being executed to the load path
$LOAD_PATH.unshift(File.expand_path(File.dirname(__FILE__))) unless
$:.include?(File.dirname(__FILE__)) || $LOAD_PATH.include?(File.expand_path(File.dirname(__FILE__)))

# if __FILE__ is a symlink then follow *every* symlink
if File.symlink?(__FILE__)
  require 'pathname'
  $LOAD_PATH << File.dirname( Pathname.new(__FILE__).realpath )
end

require 'inflector.rb'
require 'tld.rb'
require 'common-misspellings.rb'
require 'homophones.rb'
require 'country.rb'
require 'output.rb'


$VERSION = "0.7.1"
# DNS_SERVERS = %w| 8.8.8.8 8.8.4.4 64.6.64.6 64.6.65.6 209.244.0.3 209.244.0.4 |

ASYNC_DNS_SERVERS = [ [:udp, "8.8.8.8", 53],
                      [:udp, "8.8.4.4", 53],
                      [:udp, "64.6.64.6", 53],
                      [:udp, "64.6.65.6", 53],
                      [:udp, "209.244.0.3", 53],
                      [:udp, "209.244.0.4", 53],
                    ]


PREFER_ASCIIART = nil #1
PREFER_ASCII_COLOUR = nil# :red

class Keyboard
  def initialize(layout)
    case layout
    when "qwerty" then @rows = ["1234567890-", "qwertyuiop", "asdfghjkl", "zxcvbnm"]
        # france, belgium
    when "azerty" then @rows = ["1234567890-", "azertyuiop", "qsdfghjklm", "wxcvbn"]
        # germany, austria, switzerland, hungary
    when "qwertz" then @rows = ["1234567890-", "qwertzuiop", "asdfghjkl", "yxcvbnm"]
        # dvorak            
    when "dvorak" then @rows = ["1234567890-", "pyfgcrl", "aoeuidhtns", "qjkxbmwvz"]
    else raise("Unknown keyboard: #{layout}")
    end     
  end

  def key_left(char)
    r = row(char)
    return nil if r.nil?
    return nil if r.index(char).nil?
    return nil if r.index(char) == 0  # already far left
    r[r.index(char)-1].nil? ? nil : "%c" % r[r.index(char) - 1]
  end

  def key_right(char)
    r = row(char)
    return nil if r.nil?
    return nil if r.index(char).nil?
    return nil if r.index(char) == r.length - 1  # already far right
    r[r.index(char)+1].nil? ? nil : "%c" % r[r.index(char) + 1]
  end

  def row(char)
    #returns keyboard. eg. qwertyuiop  or nil if not found
    r = @rows.map { |k| k if k.include?(char) }.join
    r.empty? ? nil : r
  end
end



class Typo
  attr_accessor :type, :name, :valid_name, :tld, :extension, :registered_name, :popularity, :resolved_a, :resolved_mx, :resolved_ns, :country_a
  
  def get_resolved(task: Async::Task.current)
    @resolved_a = ""
    @resolved_mx = ""
    @resolved_ns = ""
    return if !@valid_name

    unless defined? @@resolver # Global Resolver
      $logger.debug "create resolver"
      # $resolver = Async::DNS::Resolver.new( ASYNC_DNS_SERVERS , timeout:30)
      @@resolver = Async::DNS::Resolver.new( ASYNC_DNS_SERVERS , timeout:30)
    end

#    resolver = Resolv::DNS.new( :nameserver => DNS_SERVERS)  
#    resolver.timeouts = [10, 30, 60]

    task.async do |subtask|
      begin
        addresses = @@resolver.query(@name, Resolv::DNS::Resource::IN::A)

        if addresses.answer.first
          @resolved_a = addresses.answer.first.last.address.to_s
        end

        if @resolved_a
          @country_a = Countrylookup.ip2cc(@resolved_a)
        end

      rescue StandardError => e
        $logger.error "# Resolve A failure for #{@name}. #{e} Retrying."
      rescue
      end
    end

    task.async do |subtask|
      begin
        addresses = @@resolver.query(@name, Resolv::DNS::Resource::IN::MX)

        if addresses.answer.first
          @resolved_mx = addresses.answer.first.last.exchange.to_s
        end

      rescue StandardError => e
        $logger.error "# Resolve MX failure for #{@name}. #{e} Retrying."
      end
    end

    task.async do |subtask|
      begin           
        addresses = @@resolver.query(@name, Resolv::DNS::Resource::IN::NS)
        if addresses.answer.first
          @resolved_ns = addresses.answer.first.last.name.to_s
        end

      rescue StandardError => e
        $logger.error "# Resolve NS failure for #{@name}. #{e} Retrying."
      end
    end

  end
  
  def get_popularity_google
    # Google confuses dots for commas and spaces

    return "" if !@valid_name
    begin
      http = Net::HTTP.new("www.google.com");
      req = Net::HTTP::Get.new("/search?q=%22#{@name}%22", {"User-Agent" => "Opera/9.20 (Windows NT 6.0; U; en)"})
      res = http.request(req)
      resp = res.body
      r = resp.scan(/About ([\d,]+)/).flatten.first.delete(",").to_i
    rescue
      return 0
    rescue Timeout::Error
      $logger.error "# Timeout for #{@name}. Retrying"
      retry
    end
    return @popularity = r
  end

 def get_popularity_bing(task: Async::Task.current)
    return "" if !@valid_name

    r = nil
=begin
    task.async do |subtask|
      begin
        internet = Async::HTTP::Internet.new
        response = internet.get("https://www.bing.com/search?q=%22#{@name}%22&qs=n&first=10&FORM=PERE&setlang=en-us&setmkt=", {"User-Agent" => "Wget/1.19.4 (linux-gnu)"})
        body = response.read
        r = body.scan(/<span class="sb_count">([^<]+)/).flatten.first
        $logger.debug "#{@name} - #{r}"
        r = r.encode(Encoding.find('ASCII'), :invalid => :replace, :undef=>:replace, :replace=>""  ).split[2]
        $logger.debug r
      rescue
        #
      rescue Timeout::Error
       $logger.error "# Timeout for #{@name}. Retrying"
        retry
      ensure
        internet.close
      end
    end
=end
  
    begin
      http = Net::HTTP.new("www.bing.com");
      req = Net::HTTP::Get.new("/search?q=%22#{@name}%22&qs=n&first=10&FORM=PERE&setlang=en-us&setmkt=", {"User-Agent" => "Wget/1.19.4 (linux-gnu)"})
      res = http.request(req)
      resp = res.body
      r = resp.scan(/<span class="sb_count">([^<]+)/).flatten.first
      $logger.debug "#{@name} - #{r}"
      r = r.encode(Encoding.find('ASCII'), :invalid => :replace, :undef=>:replace, :replace=>""  ).split[2]
      $logger.debug r
    rescue
    rescue Timeout::Error
      $logger.error "# Timeout for #{@name}. Retrying"
      retry
    end
  
#=end
    return @popularity = r
  end


end

class Domainname
  attr_accessor :domain, :registered_name, :tld, :extension, :valid, :typos
  
  def initialize(s)
    @domain = s
    @registered_name = TLD.registered_name(@domain)
    @tld = TLD.tld(@domain)
    @extension = TLD.extension(@domain)
    @valid = TLD.valid_domain?(@domain)
    @typos = Array.new
  end
  
  def create_typos
    self.original.sort.uniq.each {|c|
        t = Typo.new
        t.type = "Original"
        t.name = c
        @typos << t
    }

    self.character_omission.sort.uniq.each {|c|
        t = Typo.new
        t.type = "Character Omission"
        t.name = c
        @typos << t
    }

    self.character_repeat.sort.uniq.each {|c|
        t = Typo.new
        t.type = "Character Repeat"
        t.name = c
        @typos << t
    }
    
    self.character_swap.sort.uniq.each {|c|
        t = Typo.new
        t.type = "Character Swap"
        t.name = c
        @typos << t
    }
    self.character_replacement.sort.uniq.each {|c|
        t = Typo.new
        t.type = "Character Replacement"
        t.name = c
        @typos << t
    }
    self.double_character_replacement.sort.uniq.each {|c|
        t = Typo.new
        t.type = "Double Replacement"
        t.name = c
        @typos << t
    }
    self.character_insertion.sort.uniq.each {|c|
        t = Typo.new
        t.type = "Character Insertion"
        t.name = c
        @typos << t
    }

    self.missingdot.sort.uniq.each {|c|
        t=Typo.new
        t.type = "Missing Dot"
        t.name = c
        @typos << t
    }
=begin
    self.insert_dot.sort.uniq.each {|c|
        t=Typo.new
        t.type = "Insert Dot"
        t.name = c
        @typos << t
    }
=end
    self.insert_dash.sort.uniq.each {|c|
        t=Typo.new
        t.type = "Insert Dash"
        t.name = c
        @typos << t
    }

    self.stripdashes.sort.uniq.each {|c|
        t = Typo.new
        t.type = "Strip Dashes"
        t.name = c
        @typos << t
    }

    self.singular_or_pluralise.sort.uniq.each {|c|
        t = Typo.new
        t.type = "Singular or Pluralise"
        t.name = c
        @typos << t
    } 

    self.common_misspellings.sort.uniq.each {|c|
        t = Typo.new
        t.type = "Common Misspelling"
        t.name = c
        @typos << t
    } 

    self.vowel_swap.sort.uniq.each {|c|
        t = Typo.new
        t.type = "Vowel Swap"
        t.name = c
        @typos << t
    } 

    self.homophones.sort.uniq.each {|c|
        t = Typo.new
        t.type = "Homophones"
        t.name = c
        @typos << t
    } 

    self.bit_flipping.sort.uniq.each {|c|
        t = Typo.new
        t.type = "Bit Flipping"
        t.name = c
        @typos << t
    } 

    unless RUBY_VERSION =~ /^1.8/
      self.homoglyphs.sort.uniq.each {|c|
        t = Typo.new
        t.type = "Homoglyphs"
        t.name = c
        @typos << t
      } 
    end

    self.wrong_tld.sort.uniq.each {|c|
      t = Typo.new
      t.type = "Wrong TLD"
      t.name = c
      @typos << t
    } 

    self.wrong_sld.sort.uniq.each {|c|
      t = Typo.new
      t.type = "Wrong SLD"
      t.name = c
      @typos << t
    } 
#=begin
    self.all_sld.sort.uniq.each {|c|
      t = Typo.new
      t.type = "All SLD"
      t.name = c
      @typos << t
    } 
#=end

    # remove duplicate names
    found=Hash.new(0);
    @typos= @typos.select {|x| x if 1 == found[x.name] += 1; }
    
    # remove actual name unless it's the original
    @typos.delete_if { |x| x.name == self.domain and x.type != "Original" }
    
    @typos.each {|t|
      t.valid_name = TLD.valid_domain?(t.name)
      t.tld = TLD.tld(t.name)
      t.registered_name = TLD.registered_name(t.name)
      t.extension = TLD.extension(t.name)
    }
  end
  
  def original
    [@domain]
  end
  
  def character_omission
    (0..@domain.length-2).map { |i|  @domain[0..i].to_s + @domain[i+2..@domain.length] }
  end
  
  def character_swap
    (0..@domain.length-2).map { |i|
        d = @domain.split(//) #split string to chars
        d[i], d[i+1]=d[i+1], d[i] # swap array elements
        d.join #
    }
  end
  
  def character_replacement
    kb = $keyboard
    list = Array.new

    (0..@domain.length - 1).each { |i|
        keyleft = kb.key_left(@domain[i..i])
        if !keyleft.nil?
            x = @domain.dup
            x[i] = keyleft
            list << x
        end

        keyright = kb.key_right(@domain[i..i])
        if !keyright.nil?
            x = @domain.dup
            x[i] = keyright
            list << x
        end
    }
    list
  end
  
  def double_character_replacement
    kb = $keyboard
    list = Array.new

    (0..@domain.length-1).each { |i|
        if @domain[i..i] == @domain[i+1..i+1]
          keyleft = kb.key_left(@domain[i..i])
          if !keyleft.nil?
              x = @domain.dup
              x[i] = keyleft
              x[i+1] = keyleft
              list << x           
          end

          keyright = kb.key_right(@domain[i..i])
          if !keyright.nil?
              x = @domain.dup
              x[i] = keyright
              x[i+1] = keyright
              list << x
          end
          next
        end
    }
    list
  end

  def character_insertion
    kb = $keyboard
    list = Array.new
    (0..@domain.length - 1).each { |i|
        keyleft = kb.key_left(@domain[i..i])
        if !keyleft.nil?
            list << @domain[0..i] + keyleft + @domain[i + 1..-1]
        end

        list << @domain[0..i] + @domain[i..i] + @domain[i + 1..-1]

        keyright = kb.key_right(@domain[i..i])
        if !keyright.nil?
            list << @domain[0..i] + keyright + @domain[i + 1..-1]
        end
    }
    list
  end

  def missingdot
    list = Array.new
    # first add www to the domain like wwwyahoo.com
    list << "www#{@domain}"
    dotindex = 0
    while dotindex = @domain.index(".", dotindex + 1) do
        domain_array = @domain.split(//)
        domain_array.delete_at(dotindex)
        list << domain_array.join
    end
    # if a domain doesn't have an extension, add .com like a webbrowser does
    list.each {|d| d << ".com" if !d.include?(".") }
  end

  # this needs some work as it returns FQDN and not domains
  def insert_dot
    (0..@domain.length-2).map { |i|  @domain[0..i].to_s + "." + @domain[i+1..@domain.length] }
  end

  def insert_dash
    (0..@domain.length-2).map { |i|  @domain[0..i].to_s + "-" + @domain[i+1..@domain.length] }
  end

  def stripdashes
    [@domain.delete("-")]
  end

  def singular_or_pluralise
    list = Array.new
    list << ActiveSupport::Inflector.singularize(@registered_name) + "." + @extension.to_s
    list << ActiveSupport::Inflector.pluralize(@registered_name) + "." + @extension.to_s
    list.delete(@domain)
    list
  end
  
  def character_repeat    
    (0..@domain.size - 1).map {|x| @domain[0..x] + @domain[x].chr + @domain[x + 1..-1] }
  end

  # unused
  def popular_sld
    reg_name = TLD.registered_name(@domain)
    common_tlds = %w|co.uk com.au co.za |
    common_tlds.map { |tld| [reg_name,tld].join(".") }   
  end

  def wrong_sld
    if TLD.valid_sld?(@domain)
        reg_name = TLD.registered_name(@domain)
        TLD.cc(TLD.tld(@domain))['slds'].map { |x| [reg_name,x].join(".") }
    else
        []
    end
  end

  def all_sld
    reg_name = TLD.registered_name(@domain)
    all_slds = TLD.hash.map {|tld,hash| hash["slds"] unless hash["slds"].empty? }.compact.flatten
    all_slds.map {|sld| "#{reg_name}.#{sld}" }
  end

  def common_misspellings
    CommonMisspellings.dictionary.keys.select { |x| @domain.include?(x) }.map { |word|   
        @domain.gsub(word, CommonMisspellings.misspelling(word)) }
    end

  # swap the vowels, but never the first letter of the word
  def vowel_swap
    vowels = %w| a e i o u|
    word = @domain
    ord = word[1..-1];
    (vowels.map { |x| vowels.map { |y| ord.gsub(x,y) }}.flatten.sort.uniq - [word]).map { |x| word.chars.first+x }
  end

  def homophones
    Homophones.dictionary.keys.select { |x| @domain.include?(x) }.map { |word|
        Homophones.dictionary[word].map { |homophoneword| @domain.gsub(word,homophoneword) } }.flatten
  end

  def bit_flipping
    masks = [128, 64, 32, 16, 8, 4, 2, 1]
    allowed_chars = /[a-zA-Z0-9_\-\.]/

    domains = []
    @domain.split(//).each_with_index do |c,i| 
        flipped = masks.map { |mask| (c[0].ord ^ mask).chr.downcase }.select { |x| x =~ allowed_chars }
        domains << flipped.map { |x| e = @domain.clone; e[i] = x; e }
    end
    domains.flatten!.sort!.uniq!
    domains
  end

  def wrong_tld
    # https://data.iana.org/TLD/tlds-alpha-by-domain.txt
    reg_name = TLD.registered_name(@domain)
    # common_tlds = %w|com org edu uk net ca de jp fr au us ru ch it nl se no es|
    # common_tlds.map {|tld| [reg_name,tld].join(".") } 

    TLD.all_tlds.map { |tld| [reg_name,tld].join(".") }
  end

  def replace_permutations(string, pattern, replacement)
    permutations=[]
      # how many times does pattern appear? it is n
      n = string.scan(pattern).size
      # generate perumations map for n times
      map = [pattern,replacement].repeated_permutation(n).map

      occurances = string.match(pattern)
      # for each occurance of pattern, replace using the map
      map.each do |mapset| 
          #puts mapset.inspect
          strsplit = string.split(pattern)
          mapset.each_with_index do |thisreplacement, i|
              #puts [i,thisreplacement].inspect
              strsplit[i] = strsplit[i] + thisreplacement
          end
          permutations << strsplit.join
      end
      permutations.flatten.sort.uniq - [string]
  end

  def homoglyphs
    #https://en.wikipedia.org/wiki/Homoglyph
    homoglyphs = {"0"=>"o", "1"=>"l", "l"=> "i", "rn" => "m", "cl"=>"d", "vv"=>"w" }
    all_homoglyphs = homoglyphs.merge(homoglyphs.invert)
    list=[]
    all_homoglyphs.each_pair { |x, y|
        list << replace_permutations(@domain,x,y)
    }
    list.flatten.sort.uniq
  end
end

def banner
# thanks http://www.patorjk.com/software/taag/#p=testall&h=2&v=1&f=Graffiti&t=URLCrazy

asciiart = []
asciiart << '
____ _____________.____   _________                             
|    |   \______   \    |  \_   ___ \___________  ___________.__.
|    |   /|       _/    |  /    \  \|_  __ \__  \ \___   <   |  |
|    |  / |    |   \    |__\     \___|  | \// __ \_/    / \___  |
|______/  |____|_  /_______ \______  /__|  (____  /_____ \/ ____|
                 \/        \/      \/           \/      \/\/     

'

asciiart << '
 █    ██  ██▀███   ██▓    ▄████▄  ██▀███  ▄▄▄     ▒███████▒▓██   ██▓
 ██  ▓██▒▓██ ▒ ██▒▓██▒   ▒██▀ ▀█ ▓██ ▒ ██▒████▄   ▒ ▒ ▒ ▄▀░ ▒██  ██▒
▓██  ▒██░▓██ ░▄█ ▒▒██░   ▒▓█    ▄▓██ ░▄█ ▒██  ▀█▄ ░ ▒ ▄▀▒░   ▒██ ██░
▓▓█  ░██░▒██▀▀█▄  ▒██░   ▒▓▓▄ ▄██▒██▀▀█▄ ░██▄▄▄▄██  ▄▀▒   ░  ░ ▐██▓░
▒▒█████▓ ░██▓ ▒██▒░██████▒ ▓███▀ ░██▓ ▒██▒▓█   ▓██▒███████▒  ░ ██▒▓░
░▒▓▒ ▒ ▒ ░ ▒▓ ░▒▓░░ ▒░▓  ░ ░▒ ▒  ░ ▒▓ ░▒▓░▒▒   ▓▒█░▒▒ ▓░▒░▒   ██▒▒▒
░░▒░ ░ ░   ░▒ ░ ▒░░ ░ ▒  ░ ░  ▒    ░▒ ░ ▒░ ▒   ▒▒ ░░▒ ▒ ░ ▒ ▓██ ░▒░
 ░░░ ░ ░   ░░   ░   ░ ░  ░         ░░   ░  ░   ▒  ░ ░ ░ ░ ░ ▒ ▒ ░░
   ░        ░         ░  ░ ░        ░          ░  ░ ░ ░     ░ ░
                         ░                        ░         ░ ░

'

asciiart << "
db    db d8888b. db       .o88b. d8888b.  .d8b.  d88888D db    db 
88    88 88  `8D 88      d8P  Y8 88  `8D d8' `8b YP  d8' `8b  d8' 
88    88 88oobY' 88      8P      88oobY' 88ooo88    d8'   `8bd8'  
88    88 88`8b   88      8b      88`8b   88~~~88   d8'      88    
88b  d88 88 `88. 88booo. Y8b  d8 88 `88. 88   88  d8' db    88    
~Y8888P' 88   YD Y88888P  `Y88P' 88   YD YP   YP d88888P    YP    

"

asciiart << '
_______ ______ _____   ______                         
|   |   |   __ \     |_|      |.----.---.-.-----.--.--.
|   |   |      <       |   ---||   _|  _  |-- __|  |  |
|_______|___|__|_______|______||__| |___._|_____|___  |
                                                |_____|

'       
asciiart[ (PREFER_ASCIIART or rand(asciiart.size)) ]
end

def usage 
    random_colour = (PREFER_ASCII_COLOUR or [:red, :green, :blue, :yellow, :cyan ][ rand(5) ])
    print_output banner.colorize( random_colour )

print "URLCrazy version #{$VERSION} by Andrew Horton (urbanadventurer)
Visit https://morningstarsecurity.com/research/urlcrazy

Generate and test domain typos and variations to detect and perform typo squatting, URL hijacking,
phishing, and corporate espionage.

Supports the following domain variations:
Character omission, character repeat, adjacent character swap, adjacent character replacement, double 
character replacement, adjacent character insertion, missing dot, strip dashes, insert dash,
singular or pluralise, common misspellings, vowel swaps, homophones, bit flipping (cosmic rays),
homoglyphs, wrong top level domain, and wrong second level domain.

Usage: #{$0} [options] domain

Options
-k, --keyboard=LAYOUT  Options are: qwerty, azerty, qwertz, dvorak (default: qwerty)
-p, --popularity       Check domain popularity with Google
-r, --no-resolve       Do not resolve DNS
-i, --show-invalid     Show invalid domain names
-f, --format=TYPE      Human readable, JSON, or CSV (default: human readable)
-o, --output=FILE      Output file
-n, --nocolor          Disable colour
-d, --debug            Enable debugging output for development
-h, --help             This help
-v, --version          Print version information. This version is #{$VERSION}

"
  if RUBY_VERSION.to_f < 1.9
      puts "Warning: You are using a Ruby version below 1.9. Some features are not available.\n\n"
  end
end

# send output to the screen, file, or both
def puts_output(*s)
    unless s.empty?
        $output_filep.puts s.first if $output_filep
        puts s.first
    else
        # as puts with no arguments
        $output_filep.puts if $output_filep
        puts
    end
end

def print_output(s)
    $output_filep.print s if $output_filep
    print s
end

check_popularity = false
resolve_domains = true
show_invalid = false
show_only_resolve = false
output_filename = nil
$output_filep = nil
keyboard_layout = "qwerty"
output_type = "human"

opts = GetoptLong.new(
  [ '--help', '-h', GetoptLong::NO_ARGUMENT ],
  [ '--keyboard','-k', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--no-resolve','-r', GetoptLong::NO_ARGUMENT ],
  [ '--popularity','-p', GetoptLong::NO_ARGUMENT ],
  [ '--show-invalid','-i', GetoptLong::NO_ARGUMENT ],
  [ '--output','-o', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--format','-f', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--only-resolve','-R', GetoptLong::NO_ARGUMENT ],
  [ '--debug','-d', GetoptLong::NO_ARGUMENT ],
  [ '--nocolor','-n', GetoptLong::NO_ARGUMENT ],
  [ '-v','--version', GetoptLong::NO_ARGUMENT ]
  )

begin
   opts.each do |opt, arg|
    case opt
    when '--help','-h'
        usage
        exit
    when '--keyboard','-k'
        if ['qwerty','qwertz','dvorak','azerty'].include? arg.downcase
            keyboard_layout = arg.downcase
        else
            puts "Error: Unknown keyboard layout: #{arg}"
            exit
        end
    when '--no-resolve','-r'
        resolve_domains = false
    when '--show-invalid','-i'
        show_invalid = true
    when '--only-resolve','-R'
        show_only_resolve = true  
    when '--popularity','-p'
        check_popularity = true 
    when '--format','-f'
        output_type=arg.downcase
        unless ["human","csv","json"].include?(output_type)
            puts "Invalid output type"
            exit 1
        end
    when '--output','-o'
        output_filename = arg
        String.disable_colorization = true
        begin
            $output_filep = File.new(output_filename,"w")           
        rescue
            puts "Cannot write to output file, #{output_filename}"
            exit 1
        end
    when '--nocolor','-n'
        String.disable_colorization = true
    when '--debug','-d'
        $DEBUG = true
        $logger.level = Logger::DEBUG
    when '-v','--version'
        puts $VERSION; exit
    end
end
rescue
    puts
    usage
    exit
end

if ARGV.length < 1
    usage
    exit
end

$keyboard = Keyboard.new(keyboard_layout)
this_domain = Domainname.new(ARGV[0].downcase)
abort "Aborting. Invalid domainname." unless this_domain.valid == true
abort "Aborting. Cannot show only domains that resolve when not resolving domains." if show_only_resolve and not resolve_domains

case output_type
when "human"
    output = OutputHuman.new( this_domain, keyboard_layout, check_popularity, resolve_domains, show_invalid )
when "csv"
    output = OutputCSV.new( this_domain, keyboard_layout, check_popularity, resolve_domains, show_invalid )
when "json"
    output = OutputJSON.new( this_domain, keyboard_layout, check_popularity, resolve_domains, show_invalid )
else
    abort "Unknown output type"
end

output.header
# initiate the country IP address DB
Countrylookup.startup
this_domain.create_typos
# make report
# remove invalid hostnames
if show_invalid == false
    this_domain.typos = this_domain.typos.select { |x| x if x.valid_name }
end
puts_output output.hostnames_to_process
# resolve popularity faster with threads
$semaphore_countrylookup = Mutex.new

n = 1
Async do |task|

  this_domain.typos.each do |typo|
#        task.annotate "Starting on #{typo}"
#        puts "starting on #{typo}"

    typo.get_resolved if resolve_domains
    typo.get_popularity_bing if check_popularity
  end
=begin
  #stask.print_hierarchy($stderr)
  puts "iteration: #{n}"
  n+=1

  #task.print_hierarchy($stderr)

  if task.children
    puts "Tasks: #{task.children.size}"
    num_alive = task.children.select {|node| node.alive? }.size
    num_stopped = task.children.select {|node| node.stopped? }.size

    num_running = task.children.select {|node| node.running? }.size
    num_finished = task.children.select {|node| node.finished? }.size
    num_failed = task.children.select {|node| node.failed? }.size

    puts "alive: #{num_alive}, stopped: #{num_stopped}, running: #{num_running}, finished: #{num_finished}, failed: #{num_failed}"
  end

  # Print out all running tasks in a tree:
  #  
=end
end

output.table 
$output_filep.close if $output_filep


